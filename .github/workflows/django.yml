name: Django-EKS-CICD
 
on:
  push:
    branches: [main]
  workflow_dispatch:
 
jobs:
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}
 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
 
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_EKS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_EKS }}
          aws-region: ${{ secrets.AWS_REGION_EKS }}
 
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
 
      - name: Build & Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: assessment-repo
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -f Django-WebApp/django_web_app/Dockerfile Django-WebApp/django_web_app
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
 
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: build
 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
 
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
 
      - name: Install Dependencies
        run: |
          pip install -r Django-WebApp/django_web_app/requirements.txt
          pip install flake8 pytest pytest-django
 
      - name: Run Lint
        run: |
          flake8 Django-WebApp/django_web_app || true
 
      - name: Run Tests (if any exist)
        env:
          DJANGO_SETTINGS_MODULE: django_web_app.settings
        run: |
          if ls Django-WebApp/django_web_app/tests/test_*.py 1> /dev/null 2>&1; then
            echo "‚úÖ Running tests..."
            pytest Django-WebApp/django_web_app
          else
            echo "‚ö†Ô∏è No tests found. Skipping."
          fi
 
  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: [build]
 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
 
      - name: Install OpenVPN
        run: |
          sudo apt-get update
          sudo apt-get install -y openvpn
 
      - name: Setup VPN Auth Files
        run: |
          echo "${{ secrets.VPN_PROFILE_B64 }}" | base64 -d > vpn.ovpn
          echo "${{ secrets.VPN_USER }}" > auth.txt
          echo "${{ secrets.VPN_PASS }}" >> auth.txt
 
      - name: Connect to VPN
        run: |
          sudo openvpn --config vpn.ovpn --auth-user-pass auth.txt --daemon
          sleep 15
          pgrep openvpn || { echo "‚ùå VPN Failed"; exit 1; }
 
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_EKS }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_EKS }}
          aws-region: ${{ secrets.AWS_REGION_EKS }}
 
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.30.1/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl
 
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name ${{ secrets.EKS_CLUSTER_NAME_EKS }} \
            --region ${{ secrets.AWS_REGION_EKS }}
 
      - name: Update Deployment Image in YAML
        env:
          ECR_REGISTRY: ${{ needs.build.outputs.ecr_registry }}
          ECR_REPOSITORY: assessment-repo
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          FULL_IMAGE="${ECR_REGISTRY}${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "üõ† Updating image to $FULL_IMAGE"
          sed -i "s|REPLACE_ECR_IMAGE|$FULL_IMAGE|" k8s/deployment.yaml
 
      - name: Apply Kubernetes Deployment
        run: |
          kubectl apply -f k8s/deployment.yaml -n prod --validate=false
          kubectl rollout status deployment/django-webapp -n prod
 
      - name: Disconnect VPN
        if: always()
        run: |
          sudo killall openvpn || true
          echo "üîå VPN Disconnected"
